//
//  AppDelegate.m
//  PMCocoa
//
//  Created by csaby on 2019. 12. 15..
//  Copyright Â© 2019. csaba. All rights reserved.
//

#import "AppDelegate.h"
#import <Foundation/Foundation.h>

static NSString* XPCHelperMachServiceName = @"com.proxyman.NSProxy.HelperTool";

@protocol HelperToolProtocol
- (void)setProxySystemPreferencesWithAuthorization:(NSData *)arg1 enabled:(BOOL)arg2 host:(NSString *)arg3 port:(NSString *)arg4 reply:(void (^)(NSError *, BOOL))arg5;
- (void)getVersionWithReply:(void (^)(NSString *))arg1;
- (void)connectWithEndpointReply:(void (^)(NSXPCListenerEndpoint *))arg1;
@end


@interface AppDelegate ()

@end

@implementation AppDelegate

- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {
    // Insert code here to initialize your application
    NSData                      *authorization;
     OSStatus                    err;
     AuthorizationExternalForm   extForm;
     AuthorizationRef            authref;
     NSString                    *my_proxy = @"127.0.0.1";
     NSString                    *my_port = @"3333";
     Boolean                     enab = true;
     
     err = AuthorizationCreate(NULL, kAuthorizationEmptyEnvironment, kAuthorizationFlagDefaults, &authref);
     const char* str = CFStringGetCStringPtr(SecCopyErrorMessageString(err, nil), kCFStringEncodingMacRoman);
     printf("OSStatus: %s\n",str);
     if (err == errAuthorizationSuccess)
     {
         err = AuthorizationMakeExternalForm(authref, &extForm);
         str = CFStringGetCStringPtr(SecCopyErrorMessageString(err, nil), kCFStringEncodingMacRoman);
         printf("OSStatus: %s\n",str);
     }
     if (err == errAuthorizationSuccess)
     {
         authorization = [[NSData alloc] initWithBytes:&extForm length:sizeof(extForm)];
         str = CFStringGetCStringPtr(SecCopyErrorMessageString(err, nil), kCFStringEncodingMacRoman);
         printf("OSStatus: %s\n",str);
     }
     assert(err == errAuthorizationSuccess);
     
         NSString*  _serviceName = XPCHelperMachServiceName;
         NSXPCConnection* _agentConnection = [[NSXPCConnection alloc] initWithMachServiceName:_serviceName options:4096];
         [_agentConnection setRemoteObjectInterface:[NSXPCInterface interfaceWithProtocol:@protocol(HelperToolProtocol)]];
         [_agentConnection resume];

         id obj = [_agentConnection remoteObjectProxyWithErrorHandler:^(NSError* error)
         {
             (void)error;
             NSLog(@"Connection Failure");
         }];
         NSLog(@"obj: %@", obj);
         NSLog(@"conn: %@", _agentConnection);
         [obj setProxySystemPreferencesWithAuthorization:authorization enabled:enab host:my_proxy port:my_port reply:^(NSError * err, BOOL b){
                     NSLog(@"Response, %@", err);
                 }];
         [obj setProxySystemPreferencesWithAuthorization:authorization enabled:enab host:my_proxy port:my_port reply:^(NSError * err, BOOL b){
                     NSLog(@"Response, %@", err);
                 }];
         NSLog(@"Done");
}


- (void)applicationWillTerminate:(NSNotification *)aNotification {
    // Insert code here to tear down your application
}


@end
